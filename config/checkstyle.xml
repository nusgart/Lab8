<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
"-//Puppy Crawl//DTD Check Configuration 1.3//EN"
"http://checkstyle.sourceforge.net/dtds/configuration_1_3.dtd">

<!--

  Checkstyle configuration that checks the sun coding conventions from:

    - the Java Language Specification at
      http://java.sun.com/docs/books/jls/second_edition/html/index.html

    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/

    - the Javadoc guidelines at
      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html

    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html

    - some best practices

  Checkstyle is very configurable. Be sure to read the documentation at
  http://checkstyle.sf.net (or in your downloaded distribution).

  Most Checks are configurable, be sure to consult the documentation.

  To completely disable a check, just comment it out or delete it from the file.

  Finally, it is worth reading the documentation.

-->

<!--
  Configuration customized for CS125.
  * Semi-permanent customizations marked with CS125.
  * Per-project customizations (if any) marked with Lab8.
 -->

<module name="Checker">
  <!--
        If you set the basedir property below, then all reported file
        names will be relative to the specified directory. See
        http://checkstyle.sourceforge.net/5.x/config.html#Checker

        <property name="basedir" value="${basedir}"/>
    -->

  <!-- CS125: Add warning suppression via @SuppressWarnings Java annotation. -->
  <module name="SuppressWarningsFilter" />

  <property name="fileExtensions" value="java, properties, xml"/>

  <!-- Checks that a package-info.java file exists for each package.     -->
  <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->

  <!-- CS125: We don't create a package. -->
  <!-- <module name="JavadocPackage"/> -->

  <!--&lt;!&ndash; Checks whether files end with a new line.                        &ndash;&gt;
  &lt;!&ndash; See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile &ndash;&gt;
  &lt;!&ndash; CS125: Accept both Unix and Windows line endings. &ndash;&gt;
  <module name="NewlineAtEndOfFile">
    <property name="lineSeparator" value="lf_cr_crlf"/>
  </module>

  &lt;!&ndash; Checks that property files contain the same keys.         &ndash;&gt;
  &lt;!&ndash; See http://checkstyle.sf.net/config_misc.html#Translation &ndash;&gt;
  <module name="Translation"/>

  &lt;!&ndash; Checks for Size Violations.                    &ndash;&gt;
  &lt;!&ndash; See http://checkstyle.sf.net/config_sizes.html &ndash;&gt;
  <module name="FileLength"/>

  &lt;!&ndash; Checks for whitespace                               &ndash;&gt;
  &lt;!&ndash; See http://checkstyle.sf.net/config_whitespace.html &ndash;&gt;
  <module name="FileTabCharacter"/>

  &lt;!&ndash; Miscellaneous other checks.                   &ndash;&gt;
  &lt;!&ndash; See http://checkstyle.sf.net/config_misc.html &ndash;&gt;
  <module name="RegexpSingleline">
    <property name="format" value="\s+$"/>
    <property name="minimum" value="0"/>
    <property name="maximum" value="0"/>
    <property name="message" value="Line has trailing spaces."/>
  </module>
  -->
  <module name="TreeWalker">
  <!--
    &lt;!&ndash; CS125: Add warning suppression via @SuppressWarnings Java annotation. &ndash;&gt;
    <module name="SuppressWarningsHolder" />

    &lt;!&ndash; Checks for Javadoc comments.                     &ndash;&gt;
    &lt;!&ndash; See http://checkstyle.sf.net/config_javadoc.html &ndash;&gt;
    <module name="JavadocMethod"/>
    <module name="JavadocType"/>
    <module name="JavadocVariable"/>
    <module name="JavadocStyle"/>

    &lt;!&ndash; Checks for Naming Conventions.                  &ndash;&gt;
    &lt;!&ndash; See http://checkstyle.sf.net/config_naming.html &ndash;&gt;
    <module name="ConstantName"/>
    <module name="LocalFinalVariableName"/>
    <module name="LocalVariableName"/>
    <module name="MemberName"/>
    <module name="MethodName"/>
    <module name="PackageName"/>
    <module name="ParameterName"/>
    <module name="StaticVariableName"/>
    <module name="TypeName"/>

    &lt;!&ndash; Checks for imports                              &ndash;&gt;
    &lt;!&ndash; See http://checkstyle.sf.net/config_import.html &ndash;&gt;
    <module name="AvoidStarImport"/>
    <module name="IllegalImport"/> &lt;!&ndash; defaults to sun.* packages &ndash;&gt;
    <module name="RedundantImport"/>
    <module name="UnusedImports">
      <property name="processJavadoc" value="false"/>
    </module>-->

    <!-- Checks for Size Violations.                    -->
    <!-- See http://checkstyle.sf.net/config_sizes.html -->
    <!-- CS125: 80 characters is too few on modern monitors. Google uses 100, so so do we. -->
    <module name="LineLength">
      <property name="max" value="100"/>
    </module>
    <!--<module name="MethodLength"/>
    <module name="ParameterNumber"/>

    &lt;!&ndash; Checks for whitespace                               &ndash;&gt;
    &lt;!&ndash; See http://checkstyle.sf.net/config_whitespace.html &ndash;&gt;
    <module name="EmptyForIteratorPad"/>
    <module name="GenericWhitespace"/>
    <module name="MethodParamPad"/>
    <module name="NoWhitespaceAfter"/>
    <module name="NoWhitespaceBefore"/>
    <module name="OperatorWrap"/>
    <module name="ParenPad"/>
    <module name="TypecastParenPad"/>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround"/>

    &lt;!&ndash; Modifier Checks                                    &ndash;&gt;
    &lt;!&ndash; See http://checkstyle.sf.net/config_modifiers.html &ndash;&gt;
    <module name="ModifierOrder"/>
    <module name="RedundantModifier"/>

    &lt;!&ndash; Checks for blocks. You know, those {}'s         &ndash;&gt;
    &lt;!&ndash; See http://checkstyle.sf.net/config_blocks.html &ndash;&gt;
    <module name="AvoidNestedBlocks"/>
    <module name="EmptyBlock"/>
    <module name="LeftCurly"/>
    <module name="NeedBraces"/>
    <module name="RightCurly"/>

    &lt;!&ndash; Checks for common coding problems               &ndash;&gt;
    &lt;!&ndash; See http://checkstyle.sf.net/config_coding.html &ndash;&gt;
    <module name="AvoidInlineConditionals"/>
    <module name="EmptyStatement"/>
    <module name="EqualsHashCode"/>
    <module name="HiddenField"/>
    <module name="IllegalInstantiation"/>
    <module name="InnerAssignment"/>

    <module name="MagicNumber"/>
    <module name="MissingSwitchDefault"/>
    &lt;!&ndash; CS125: I don't like these defaults. if (test == true) is clear. &ndash;&gt;
    &lt;!&ndash; <module name="SimplifyBooleanExpression"/> &ndash;&gt;
    &lt;!&ndash; <module name="SimplifyBooleanReturn"/> &ndash;&gt;

    &lt;!&ndash; Checks for class design                         &ndash;&gt;
    &lt;!&ndash; See http://checkstyle.sf.net/config_design.html &ndash;&gt;
    <module name="DesignForExtension"/>
    <module name="FinalClass"/>
    &lt;!&ndash; CS125: Our utility classes must have public main methods. &ndash;&gt;
    &lt;!&ndash; <module name="HideUtilityClassConstructor"/> &ndash;&gt;
    <module name="InterfaceIsType"/>
    <module name="VisibilityModifier"/>

    &lt;!&ndash; Miscellaneous other checks.                   &ndash;&gt;
    &lt;!&ndash; See http://checkstyle.sf.net/config_misc.html &ndash;&gt;
    <module name="ArrayTypeStyle"/>
    <module name="FinalParameters"/>
    <module name="TodoComment"/>
    <module name="UpperEll"/>-->

  </module>

</module>
